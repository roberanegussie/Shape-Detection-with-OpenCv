#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include<cmath>
#include<iostream>

usingnamespace std;
usingnamespace cv; 
staticdouble angle(cv::Pointpt1, cv::Pointpt2, cv::Pointpt0) 
{
	double dx1 = pt1.x - pt0.x;
	double dy1 = pt1.y - pt0.y;
	double dx2 = pt2.x - pt0.x;
	double dy2 = pt2.y - pt0.y;
	return (dx1*dx2 + dy1 * dy2) / sqrt((dx1*dx1 + dy1 * dy1)*(dx2*dx2 + dy2 * dy2) + 1e-10);
}

void setLabel(cv::Mat&im, const std::stringlabel, std::vector<cv::Point>&contour)
{
	int fontface = cv::FONT_HERSHEY_SIMPLEX;
	double scale = 0.4;
	int thickness = 1;
	int baseline = 0;

	cv::Size text = cv::getTextSize(label, fontface, scale, thickness, &baseline);
	cv::Rect r = cv::boundingRect(contour); 

	cv::Point pt(r.x + ((r.width - text.width) / 2), r.y + ((r.height + text.height) / 2));
	cv::rectangle(im, pt + cv::Point(0, baseline), pt + cv::Point(text.width, -text.height), CV_RGB(255, 255, 255), CV_FILLED);
	cv::putText(im, label, pt, fontface, scale, CV_RGB(0, 0, 0), thickness, 8);
}

int main()
{
	

	cv::Mat src = cv::imread("official.jpg"); //isert the image
	if (src.empty())
		return -1;
	cv::Mat gray;
	cv::cvtColor(src, gray, CV_BGR2GRAY); //Each pixel has a gray-value between 0 and 255 its 8bit
	
	cv::Mat bw;
	cv::Canny(gray, bw, 0, 50, 5); //use edges

	std::vector<std::vector<cv::Point>> contours;
	cv::findContours(bw.clone(), contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);

	std::vector<cv::Point> approx; //create an arrray 
	cv::Mat dst = src.clone(); // clone()Creates a full copy of the array and the underlying data.

	for (int i = 0; i < contours.size(); i++)
	{
		
		cv::approxPolyDP(cv::Mat(contours[i]), approx, cv::arcLength(cv::Mat(contours[i]), true)*0.02, true);


		
		if (std::fabs(cv::contourArea(contours[i])) < 100 || !cv::isContourConvex(approx))  
			continue;

		if (approx.size() == 3) //size() Returns a matrix size.
		{
			setLabel(dst, "TRI", contours[i]);    // Triangles
		}
		elseif (approx.size() >= 4 && approx.size() <= 6)
		{
			int vtc = approx.size();

			std::vector<double> cos;
			for (int j = 2; j < vtc + 1; j++)
				cos.push_back(angle(approx[j%vtc], approx[j - 2], approx[j - 1])); 
			std::sort(cos.begin(), cos.end());
			double mincos = cos.front();
			double maxcos = cos.back();

			if (vtc == 4 && mincos >= -0.1 && maxcos <= 0.3)
				setLabel(dst, "RECT", contours[i]);
			elseif (vtc == 5 && mincos >= -0.34 && maxcos <= -0.27)
				setLabel(dst, "PENTA", contours[i]);
			elseif (vtc == 6 && mincos >= -0.55 && maxcos <= -0.45)
				setLabel(dst, "HEXA", contours[i]);
		}
		else
		{
			double area = cv::contourArea(contours[i]);  
			cv::Rect r = cv::boundingRect(contours[i]);
			int radius = r.width / 2;

			if (std::abs(1 - ((double)r.width / r.height)) <= 0.2 && 
				std::abs(1 - (area / (CV_PI * std::pow(radius, 2)))) <= 0.2)
				setLabel(dst, "CIR", contours[i]);
		}
	}

	cv::imshow("src", src); 
	cv::imshow("dst", dst);
	cv::waitKey(0);
	return 0;
}
